name: Build and Push Docker image to ECR

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      IMAGE_TAG: latest
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.region }}.amazonaws.com
      ECR_REPOSITORY: ${{ vars.ecr_repo_name }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: dotnet restore
        working-directory: ./GalaxyWorld.Cli

      - name: Build Solution
        run: dotnet build --configuration Release --no-restore
        working-directory: ./GalaxyWorld.Cli

      - name: Publish for Docker
        run: dotnet publish --configuration Release --no-build --output ./publish
        working-directory: ./GalaxyWorld.Cli

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Short Git Commit Hash
        id: get-commit-sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.sha_short }}

      - name: Force Fargate Service Update
        run: |
          aws ecs update-service \
            --cluster ${{ vars.ecs_cluster_name }} \
            --service ${{ vars.SERVICE_NAME }} \
            --force-new-deployment
