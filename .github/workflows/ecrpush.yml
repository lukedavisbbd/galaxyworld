name: Build and Push Docker image to ECR

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      IMAGE_TAG: latest
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: eu-west-1
      AWS_ECR_REPOSITORY_NAME: ${{ vars.ecr_repo_name }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: eu-west-1
          
      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init
          
      - name: Get DB Endpoint from Terraform
        id: get-db-endpoint
        run: |
          cd terraform
          DB_ENDPOINT=$(terraform output -raw db_endpoint)
          echo "DB_ENDPOINT=$DB_ENDPOINT" >> $GITHUB_ENV

      - name: Restore Dependencies
        run: dotnet restore
        working-directory: ./GalaxyWorld.Cli

      - name: Build Solution
        run: dotnet build --configuration Release --no-restore
        working-directory: ./GalaxyWorld.Cli

      - name: Publish for Docker
        run: dotnet publish --configuration Release --no-build --output ./publish
        working-directory: ./GalaxyWorld.Cli
     
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Short Git Commit Hash
        id: get-commit-sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: galaxy_ecr
          IMAGE_TAG: latest
      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.AWS_ECR_REPOSITORY_NAME }}:latest


      - name: Upload CLI to S3
        run: |
           aws s3 cp GalaxyWorld.Cli/publish/GalaxyWorld.Cli.dll s3://your-bucket-name/galaxyworld-cli-latest.dll
           
      - name: Force Fargate Service Update
        run: |
           aws ecs update-service --cluster gw_ecs_cluster --service galaxyworld-api-service --force-new-deployment
