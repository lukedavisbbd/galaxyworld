name: "Deployment pipeline"

on:
  push:
    branches:
      - master

jobs:
  terraform:
    name: "Manage AWS Resources"
    runs-on: ubuntu-latest
    outputs:
      dbhost: ${{ steps.tf_outputs.outputs.dbhost }}
      ec2host: ${{ steps.tf_outputs.outputs.ec2host }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
      TF_VAR_db_username: ${{ secrets.TF_VAR_DB_USERNAME }}
      TF_VAR_key_name: galaxyworldkey
    defaults:
      run:
        working-directory: terraform_ec2
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ secrets.AWS_BUCKET_NAME }}" -backend-config="key=${{ secrets.AWS_BUCKET_KEY }}" -backend-config="region=af-south-1"

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Capture Terraform Outputs
        id: tf_outputs
        run: |
          echo "dbhost=$(terraform output -raw db_host)" >> $GITHUB_OUTPUT
          echo "ec2host=$(terraform output -raw ec2_host)" >> $GITHUB_OUTPUT
  release:
    name: Build & Release
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: Run API Unit Tests
        working-directory: ./GalaxyWorld.Api
        run: dotnet test

      - name: Run CLI Unit Tests
        working-directory: ./Galaxyworld.Cli
        run: dotnet test

      - name: Create Secrets File
        working-directory: ./GalaxyWorld.Api
        run: |
          mkdir out
          file=out/local.conf
          echo "[Service]" > $file
          echo "Environment=\"ASPNETCORE_URLS=\\\"http://*:8080\\\"\"" >> $file
          echo "Environment=\"DBCONNECTIONSTRING=\\\"Server=${{ needs.terraform.outputs.dbhost }};Port=5432;Database=galaxyworld;User Id=${{ secrets.TF_VAR_DB_USERNAME }};Password=${{ secrets.TF_VAR_DB_PASSWORD }};Include Error Detail=true\\\"\"" >> $file
          echo "Environment=\"AUTH__CLIENTID=\\\"${{ secrets.CLIENT_ID }}\\\"\"" >> $file
          echo "Environment=\"AUTH__CLIENTSECRET=\\\"${{ secrets.CLIENT_SECRET }}\\\"\"" >> $file

      - name: Build API EXE
        working-directory: ./GalaxyWorld.Api
        run: |
          dotnet publish -c Release -p:PublishSingleFile=True -o out
          cd out
          tar czvf api.tar.gz GalaxyWorld.Api.exe appsettings.json local.conf

      - name: Build CLI EXE
        working-directory: ./GalaxyWorld.Cli
        run: |
          dotnet publish -c Release -p:PublishSingleFile=True -o out
      
      - name: Upload API Artifact for Deployment
        uses: actions/upload-artifact@v4
        with:
          name: GalaxyWorld.Api
          path: GalaxyWorld.Api/out/api.tar.gz

      - name: Get Version
        run: echo "VERSION=$(date +'%Y.%m.%d-%H.%M.%S')" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          name: "Release v${{ env.VERSION }}"
          body: "Automated release for commit ${{ github.sha }}"
          draft: false
          prerelease: false
          files: GalaxyWorld.Cli/out/GalaxyWorld.Cli.exe
 
  deploy:
    name: Deploy
    needs:
      - release
      - terraform
    runs-on: ubuntu-latest
    steps:
      - name: Download API Artifact for Deployment
        uses: actions/download-artifact@v4
        with:
          name: Galaxyworld.Api
      
      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > privatekey.pem
          chmod 0500 privatekey.pem
          EC2_HOST=${{ needs.terraform.outputs.ec2host }}
          scp -o StrictHostKeyChecking=no -i privatekey.pem ./GalaxyWorld.Api.exe "ec2-user@$EC2_HOST:GalaxyWorld.Api.exe"
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ec2-user@$EC2_HOST" "sudo systemctl restart galaxyworld.service"
  flyway:
    needs:
      - terraform
      - release
    name: Flyway Migrations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run Flyway Migrations
        run: |
          docker run --rm --volume ${{ github.workspace }}/migrations:/flyway/sql:ro redgate/flyway -url="jdbc:postgresql://${{ needs.terraform.outputs.dbhost }}/galaxyworld" -user="${{ secrets.TF_VAR_DB_USERNAME }}" -password="${{ secrets.TF_VAR_DB_PASSWORD }}" migrate
